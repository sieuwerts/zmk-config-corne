/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_gaming_toggle {
            bindings = <&tog 2>;
            key-positions = <35 34 33>;
            layers = <0 2>;
            require-prior-idle-ms = <150>;
        };

        combo_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <39 41>;
            layers = <1>;
            require-prior-idle-ms = <150>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 2>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <3 4>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <5 4>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <13 14>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <14 15>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <15 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_star {
            bindings = <&kp ASTERISK>;
            key-positions = <17 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <19 20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <20 21>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <0 12>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_swe_ao {
            bindings = <&kp RA(W)>;
            key-positions = <23 11>;
            layers = <0>;
        };

        combo_swe_ae {
            bindings = <&kp RA(A)>;
            key-positions = <23 35>;
            layers = <0>;
        };

        combo_swe_o {
            bindings = <&kp RA(O)>;
            key-positions = <22 34>;
            layers = <0>;
        };

        combo_num_1 {
            bindings = <&kp N1>;
            key-positions = <1 13>;
            layers = <0>;
        };

        combo_num_2 {
            bindings = <&kp N2>;
            key-positions = <2 14>;
            layers = <0>;
        };

        combo_num_3 {
            bindings = <&kp N3>;
            key-positions = <3 15>;
            layers = <0>;
        };

        combo_num_4 {
            bindings = <&kp N4>;
            key-positions = <16 4>;
            layers = <0>;
        };

        combo_num_5 {
            bindings = <&kp N5>;
            key-positions = <5 17>;
            layers = <0>;
        };

        combo_num_6 {
            bindings = <&kp N6>;
            key-positions = <6 18>;
            layers = <0>;
        };

        combo_num_7 {
            bindings = <&kp N7>;
            key-positions = <7 19>;
            layers = <0>;
        };

        combo_num_8 {
            bindings = <&kp N8>;
            key-positions = <8 20>;
            layers = <0>;
        };

        combo_num_9 {
            bindings = <&kp N9>;
            key-positions = <21 9>;
            layers = <0>;
        };

        combo_num_0 {
            bindings = <&kp N0>;
            key-positions = <10 22>;
            layers = <0>;
        };

        combo_gaming_num_1 {
            bindings = <&kp N1>;
            key-positions = <36 1>;
            layers = <2>;
        };

        combo_gaming_num_2 {
            bindings = <&kp N2>;
            key-positions = <36 2>;
            layers = <2>;
        };

        combo_gaming_num_3 {
            bindings = <&kp N3>;
            key-positions = <36 3>;
            layers = <2>;
        };

        combo_gaming_num_4 {
            bindings = <&kp N4>;
            key-positions = <36 4>;
            layers = <2>;
        };

        combo_gaming_num_5 {
            bindings = <&kp N5>;
            key-positions = <36 5>;
            layers = <2>;
        };

        combo_gaming_num_6 {
            bindings = <&kp N6>;
            key-positions = <36 13>;
            layers = <2>;
        };

        combo_gaming_num_7 {
            bindings = <&kp N7>;
            key-positions = <36 14>;
            layers = <2>;
        };

        combo_gaming_num_8 {
            bindings = <&kp N8>;
            key-positions = <36 15>;
            layers = <2>;
        };

        combo_gaming_num_9 {
            bindings = <&kp N9>;
            key-positions = <36 16>;
            layers = <2>;
        };

        combo_gaming_num_0 {
            bindings = <&kp N0>;
            key-positions = <36 17>;
            layers = <2>;
        };
    };

    behaviors {
        tap_swe_ao: tap_swe_ao {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_SWE_AO";
            #binding-cells = <0>;
            bindings = <&kp RA(W)>, <&kp MINUS>;

            tapping-term-ms = <200>;
        };

        tap_swe_ae: tap_swe_ae {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_SWE_AE";
            #binding-cells = <0>;
            bindings = <&kp RA(A)>, <&kp APOSTROPHE>;

            tapping-term-ms = <200>;
        };

        tap_swe_o: tap_swe_o {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_SWE_O";
            #binding-cells = <0>;
            bindings = <&kp RA(O)>, <&kp SEMICOLON>;

            tapping-term-ms = <200>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 36 37 38 39 40 41 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35 41 18 30>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 41 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        htl: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <300>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&kp ESC        &kp Q        &kp W        &kp E         &kp R          &kp T        &kp Y          &kp U          &kp I                 &kp O        &kp P                &kp MINUS
&kp BACKSLASH  &hml LCMD A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G        &kp H          &hmr RSHIFT J  &hmr RCTRL K          &hmr RALT L  &hmr RCMD SEMICOLON  &kp SQT
&kp GRAVE      &kp Z        &kp X        &kp C         &kp V          &kp B        &kp N          &kp M          &kp COMMA             &kp DOT      &kp FSLH             &kp EQUAL
                                         &kp TAB       &smart_shift   &kp ENTER    &kp BACKSPACE  &lt 1 SPACE    &kp LS(LA(LC(LCMD)))
            >;
        };

        system {
            display-name = "system";
            bindings = <
&kp DELETE  &none   &kp N7  &kp N8        &kp N9        &none         &none         &kp HOME  &kp UP        &kp END     &kp PAGE_UP    &kp MINUS
&none       &kp N0  &kp N4  &kp N5        &kp N6        &kp STAR      &none         &kp LEFT  &kp DOWN      &kp RIGHT   &kp PAGE_DOWN  &none
&none       &none   &kp N1  &kp N2        &kp N3        &kp PLUS      &none         &none     &kp COMMA     &kp PERIOD  &kp SLASH      &kp EQUAL
                            &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE    &bt BT_SEL 0  &trans    &bt BT_SEL 1
            >;
        };

        gaming {
            display-name = "gaming";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E    &kp R      &kp T        &kp Y     &kp U        &kp I          &kp O    &kp P          &kp MINUS
&kp LSHFT  &kp A  &kp S  &kp D    &kp F      &kp G        &kp H     &kp J        &kp K          &kp L    &kp SEMICOLON  &kp APOS
&kp LCTRL  &kp Z  &kp X  &kp C    &kp V      &kp B        &kp N     &kp M        &kp COMMA      &kp DOT  &kp FSLH       &kp EQUAL
                         &kp TAB  &kp SPACE  &kp ENTER    &kp BSPC  &lt 1 SPACE  &mt RALT RCMD
            >;
        };
    };
};
